import json
from ipaddress import ip_network

from django.template.response import TemplateResponse

from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.contrib import messages
from django_ajax.decorators import ajax

from .models import TaskPentest
from .forms import UserRegistrationForm

from .toolsDocker import *
from .toolsDjango import *
from .tasks import *


# Create your views here.

@ajax
def requestTask(request):
    print("in view")
    data = json.loads(request.body)

    taskPT = TaskPentest.objects.get(id=1)

    if 'taskName' in data:
        taskName = data["taskName"]
        json_file = {"taskName": taskName, "type": "output"}
        print(taskName)

        if taskName == 'restartOpenvas':
            startupOpenvas(restart=True)

        if taskName == 'parseXMLOpenvasToMSF':
            start_background_task("parseXMLOpenvasToMSF", parseXMLOpenvasToMSF, taskPT.id)

        print("giving status")
        print(get_process_status(taskName))
        json_file["status"] = get_process_status(taskName)

        json_file = json.dumps(json_file)
        return JsonResponse(json_file, safe=False)
    else:
        print("no taskName")


def index(request):
    return render(request, "index.html")


def planning(request):
    context = {
        "interfaces": getNetworkInterfaces()
    }

    return render(request, "planning.html", context)


def planningConfirm(request):
    print("in planningConfirm view")
    start_background_task("restartNetworking", restartNetworking)
    start_background_task("test", test)

    if 'updateRequest' in request.POST:
        print(1)
        get_process_status()

    return render(request, "planningConfirm.html")
    if 'ip_type' in request.POST:
        interface = request.POST['interface']

        if request.POST['ip_type'] == 'dhcp':
            settings = {
                "dhcp": True,
                "interface": interface,
                "confirmed": True,
                "excludeNet": {},
            }
            settings_json = json.dumps(settings)
            context = {
                "settings": settings_json,
            }

        '''else:
            ip1 = request.POST['ip_static_1']
            ip2 = request.POST['ip_static_2']
            ip3 = request.POST['ip_static_3']
            ip4 = request.POST['ip_static_4']
            staticIp = ip_address(ip1 + '.' + ip2 + '.' + ip3 + '.' + ip4)
            print(staticIp)

            net1 = request.POST['ip_0_1']
            net2 = request.POST['ip_0_2']
            net3 = request.POST['ip_0_3']
            net4 = request.POST['ip_0_4']
            mask = request.POST['netmask_0']

            targetNetwork = ip_network(net1 + '.' + net2 + '.' + net3 + '.' + net4 + '/' + mask)
            print(targetNetwork)

            settings_json = {
                "dhcp": False,
                "ip": str(staticIp),
                "targetNetwork": str(targetNetwork),
                "excludedNet": {},
            }

            settings_json = json.dumps(settings_json)
            print(settings_json)

            # task = Task.object.create_task(request.user, "Scan", settings=settings_json)
        '''


def createTask(request):
    print(1)


def discovery(request):
    nmap_output = ""
    openvas_output = ""

    if 'startOpenvasTask' in request.POST:
        #task_id = request.POST['task_id']
        # check if there is no openvas task for the current pentest task with the json file datatools

        task = TaskPentest.objects.get(id=1)
        openvas_task = task.name
        target_name = f'target_{task.id}8'
        target_network = task.settings["targetNetwork"]
        start_background_task("startTaskOpenvas", startTaskOpenvas, task.id, openvas_task, target_name, target_network)

    if 'nMap' in request.POST:
        nmap_post = request.POST["nMap"]
        # print(nmap_post)
        nmap_output = nMap(nmap_post, 24)

    if 'task_name' in request.POST:
        target_network = ip_network("192.168.1.0/24")
        settings_json = {
            "dhcp": True,
            "targetNetwork": str(target_network),
            "excludedNet": {},
        }
        task_name = request.POST["task_name"]
        print(task_name)
        if TaskPentest.objects.filter(name=task_name):
            print("task already exists")
        else:
            task = TaskPentest(user=request.user, name=task_name, settings=settings_json)
            print(task)
            task.save()
            print("task created")

    try:
        task_name = TaskPentest.objects.get(id=1).name
        target_network = ip_network(TaskPentest.objects.get(id=1).settings["targetNetwork"])
    except:
        task_name = None
        target_network = None

    context = {
        "task_name": task_name,
        "target_network": target_network,
        "openvas_status": getContainerStatus("openvas"),
        "openvas_task_status": getOpenvasTaskStatus(taskPT_id=1),
    }

    return render(request, "discovery.html", context=context)


def attack(request):
    msfconsoleOutput = getOutputMSFconsole()

    context = {
        "msfconsoleOutput": msfconsoleOutput,
    }

    return render(request, "attack.html", context=context)

def installTools(request):
    resultHtml = ""

    if 'searchInput' in request.POST and request.POST["searchInput"] != "":
        searchInput = request.POST["searchInput"]
        resultHtml = searchDockerHub(searchInput)

    context = {"resultHtml": resultHtml}

    return render(request, "install_tools.html", context)


def register(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Your account has been created. You can log in now!')
            return redirect('home')
    else:
        form = UserRegistrationForm()

    context = {'form': form}
    return render(request, "users/register.html", context)


def account(request):
    return render(request, "users/account.html")
